// Tokens

_letter : 'a' - 'z' | 'A' - 'Z';
id : _letter { _letter };

!whitespace : ' ' | '\t' | '\r' | '\n' ;

// Grammar

<< import . "github.com/awalterschulze/parsing-in-go-example/example03_edges/ast" >>

Grammar
  : "digraph" id "{" Statements "}" << SetGraphName($3, $1) >>
  ;

Statements
  : Statement                    << NewGraph($0) >>
  | Statements Statement         << AppendStmt($0.(*Graph), $1) >>
  ;

Statement
  : EdgeStmt
  ;

EdgeStmt:
  id "->" id  << &Edge{Src: ID($0), Dst: ID($2)}, nil >> ;