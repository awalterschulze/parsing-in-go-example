// Tokens

_letter : 'a' - 'z' | 'A' - 'Z';
id : _letter { _letter };

!whitespace : ' ' | '\t' | '\r' | '\n' ;

// Grammar

<< import . "github.com/awalterschulze/parsing-in-go-example/example05_finish/ast" >>

Grammar
  : "digraph" id "{" Statements "}" << SetGraphName($3, $1) >>
  ;

Statements
  : Statement                    << NewGraph($0) >>
  | Statements Statement         << AppendStmt($0.(*Graph), $1) >>
  ;

Statement
  : EdgeStmt
  | NodeStmt
  | AttrStmt
  ;

EdgeStmt
  : id "->" id OptionalAttributes << &Edge{Src: ID($0), Dst: ID($2), Attrs: $3.(Attrs)}, nil >>
  ;

NodeStmt
  : id OptionalAttributes         << &Node{Name: ID($0), Attrs: $1.(Attrs)}, nil >>
  ;

AttrStmt
  : Attribute                     << $0, nil >>
  ;

OptionalAttributes
  : "[" Attributes "]"            << $1, nil >>
  | empty                         << Attrs{}, nil >>
  ;

Attributes
  : Attribute                     << $0, nil >>
  | Attributes "," Attribute      << UnionMaps($0.(Attrs), $2.(Attrs)), nil >>
  ;

Attribute
  : id "=" id                     << Attrs{ID($0): ID($2)}, nil >>
  ;