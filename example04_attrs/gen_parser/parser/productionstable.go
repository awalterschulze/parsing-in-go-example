// Code generated by gocc; DO NOT EDIT.

package parser

import . "github.com/awalterschulze/parsing-in-go-example/example04_attrs/ast"

type (
	ProdTab      [numProductions]ProdTabEntry
	ProdTabEntry struct {
		String     string
		Id         string
		NTType     int
		Index      int
		NumSymbols int
		ReduceFunc func([]Attrib, interface{}) (Attrib, error)
	}
	Attrib interface {
	}
)

var productionsTable = ProdTab{
	ProdTabEntry{
		String:     `S' : Grammar	<<  >>`,
		Id:         "S'",
		NTType:     0,
		Index:      0,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String:     `Grammar : "digraph" "{" Statements "}"	<< X[2], nil >>`,
		Id:         "Grammar",
		NTType:     1,
		Index:      1,
		NumSymbols: 4,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[2], nil
		},
	},
	ProdTabEntry{
		String:     `Statements : Statement	<< NewGraph(X[0]) >>`,
		Id:         "Statements",
		NTType:     2,
		Index:      2,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return NewGraph(X[0])
		},
	},
	ProdTabEntry{
		String:     `Statements : Statements Statement	<< AppendStmt(X[0].(*Graph), X[1]) >>`,
		Id:         "Statements",
		NTType:     2,
		Index:      3,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return AppendStmt(X[0].(*Graph), X[1])
		},
	},
	ProdTabEntry{
		String:     `Statement : EdgeStmt	<<  >>`,
		Id:         "Statement",
		NTType:     3,
		Index:      4,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String:     `EdgeStmt : id "->" id OptionalAttributes	<< &Edge{Src: ID(X[0]), Dst: ID(X[2]), Attrs: X[3].(Attrs)}, nil >>`,
		Id:         "EdgeStmt",
		NTType:     4,
		Index:      5,
		NumSymbols: 4,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return &Edge{Src: ID(X[0]), Dst: ID(X[2]), Attrs: X[3].(Attrs)}, nil
		},
	},
	ProdTabEntry{
		String:     `OptionalAttributes : "[" Attributes "]"	<< X[1], nil >>`,
		Id:         "OptionalAttributes",
		NTType:     5,
		Index:      6,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[1], nil
		},
	},
	ProdTabEntry{
		String:     `OptionalAttributes : empty	<< Attrs{}, nil >>`,
		Id:         "OptionalAttributes",
		NTType:     5,
		Index:      7,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return Attrs{}, nil
		},
	},
	ProdTabEntry{
		String:     `Attributes : Attribute	<< X[0], nil >>`,
		Id:         "Attributes",
		NTType:     6,
		Index:      8,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String:     `Attributes : Attributes "," Attribute	<< UnionMaps(X[0].(Attrs), X[2].(Attrs)), nil >>`,
		Id:         "Attributes",
		NTType:     6,
		Index:      9,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return UnionMaps(X[0].(Attrs), X[2].(Attrs)), nil
		},
	},
	ProdTabEntry{
		String:     `Attribute : id "=" id	<< Attrs{ID(X[0]): ID(X[2])}, nil >>`,
		Id:         "Attribute",
		NTType:     7,
		Index:      10,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return Attrs{ID(X[0]): ID(X[2])}, nil
		},
	},
}
